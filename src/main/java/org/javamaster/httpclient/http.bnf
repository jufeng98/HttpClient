{
  parserClass="org.javamaster.httpclient.parser.HttpParser"
  parserUtilClass="org.javamaster.httpclient.parser.HttpParserUtil"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Http"
  psiImplClassSuffix="Impl"
  psiPackage="org.javamaster.httpclient.psi"
  psiImplPackage="org.javamaster.httpclient.psi.impl"

  elementTypeHolderClass="org.javamaster.httpclient.psi.HttpTypes"
  elementTypeClass="org.javamaster.httpclient.psi.HttpElementType"
  tokenTypeClass="org.javamaster.httpclient.psi.HttpTokenType"
  psiImplUtilClass="org.javamaster.httpclient.psi.impl.HttpPsiImplUtil"

  tokens=[
    LINE_COMMENT='regexp://.*'
    BLOCK_COMMENT="regexp:/\*(.|\n)*\*/"

    SCHEMA_SEPARATE='://'
    COLON=':'

    SLASH='/'
    QUESTION='?'
    EQUALS='='
    AND='&'
    HASH='#'
    DOLLAR='$'
    AT='@'

    NUMBER='regexp:-?(0|[1-9][0-9]*)(\.[0-9]+)?([eE][+-]?[0-9]*)?'
    STRING="regexp:('([^'])*'?|\"([^\"])*\"?)"
    COMMA=','
    LEFT_BRACKET='('
    RIGHT_BRACKET=')'
    INPUT_FILE_SIGN='< '
    OUTPUT_FILE_SIGN='>> '
    HISTORY_FILE_SIGN='<> '
    GLOBAL_START_SCRIPT_BRACE='<! {%'
    IN_START_SCRIPT_BRACE='< {%'
    OUT_START_SCRIPT_BRACE='> {%'
    END_SCRIPT_BRACE='%}'
    START_VARIABLE_BRACE='{{'
    END_VARIABLE_BRACE='}}'
  ]
}

httpFile ::= directionComment* globalHandler? globalVariable* requestBlock*

globalVariable::= globalVariableName equalsFlag globalVariableValue? {
    pin = 1
}
private equalsFlag ::= EQUALS {
    name="="
}
globalVariableName ::= AT globalNameFlag {
    pin = 1
    methods = [
        getName
        setName
        getReferences
        getNameIdentifier
    ]
    implements = "com.intellij.psi.PsiNameIdentifierOwner"
}
private globalNameFlag ::= GLOBAL_NAME {
    name = "variable name"
}
globalVariableValue ::= (variable | globalLiteralValue)+
globalLiteralValue ::= GLOBAL_VALUE
globalHandler ::= globalScript
globalScript ::= GLOBAL_START_SCRIPT_BRACE scriptBody END_SCRIPT_BRACE {
    pin = 1
}
requestBlock ::= comment? directionComment* preRequestHandler? request {
    recoverWhile = requestBlockRecover
}
private requestBlockRecover ::= !(REQUEST_COMMENT)
comment ::= REQUEST_COMMENT
directionComment ::= DIRECTION_COMMENT_START directionName directionValue? {
    pin = 1
}
directionName ::= DIRECTION_NAME_PART {
    name = "direction name"
}
directionValue ::= variable directionValueContent | variable | directionValueContent {
    methods = [
        getReferences
    ]
}
directionValueContent ::= DIRECTION_VALUE_PART
preRequestHandler ::= preRequestScript
preRequestScript ::= IN_START_SCRIPT_BRACE scriptBody END_SCRIPT_BRACE {
    pin = 1
}

request ::= method requestTarget version? header? body? responseHandler? outputFile? historyBodyFileList? {
    methods = [
        getContentType
        getContentTypeBoundary
        getContentLength
        getHttpVersion
        getHttpHost
    ]
    pin = 1
}

method ::= REQUEST_METHOD {
    mixin = "org.javamaster.httpclient.psi.impl.HttpMethodBase"
}

requestTarget ::= (variable | schema SCHEMA_SEPARATE) host? port? pathAbsolute? (QUESTION query)? (HASH fragment)?  {
    methods = [
        getUrl
        getReferences
    ]
    name = "url"
}
schema ::= SCHEMA_PART
host ::= HOST_VALUE | variable

variable ::= START_VARIABLE_BRACE variable_name variable_args? END_VARIABLE_BRACE {
    pin = 1
}
variable_name ::= variable_builtin? variable_reference {
    methods = [
        getName
        isBuiltin
        getReferences
    ]
    name = "variable name"
}
variable_builtin ::= DOLLAR
variable_reference ::= IDENTIFIER
variable_args ::= LEFT_BRACKET variable_arg? (COMMA variable_arg)* RIGHT_BRACKET {
    methods = [
        toArgsList
    ]
    pin = 1
}
variable_arg ::= NUMBER | STRING {
    methods = [
        getReferences
        getValue
    ]
}

port ::= COLON PORT_SEGMENT
pathAbsolute ::= (SLASH (SEGMENT | variable)?)+ {
    methods = [
        getReferences
    ]
}
query ::= queryParameter (AND queryParameter)*
queryParameter ::= queryParameterKey EQUALS? queryParameterValue? {
    pin = 1
}
queryParameterKey ::= QUERY_NAME | variable {
    methods = [
        getReferences
    ]
}
queryParameterValue ::= QUERY_VALUE | variable
fragment ::= FRAGMENT_PART
version ::= HTTP_VERSION {
    methods = [
        getVersion
    ]
}

header ::= headerField+ {
    methods = [
        getContentTypeField
        getInterfaceField
        getContentDispositionName
        getContentDispositionFileName
    ]
}
headerField ::= headerFieldName colonFlag headerFieldValue? {
    methods = [
        getName
        getValue
    ]
    pin = 1
}
private colonFlag ::= COLON {
    name = ":"
}
headerFieldName ::= FIELD_NAME
headerFieldValue ::= (FIELD_VALUE | variable | FIELD_VALUE variable | variable FIELD_VALUE)+ {
    methods = [
        getReferences
    ]
}
body ::= requestMessagesGroup | multipartMessage
requestMessagesGroup ::= inputFile | messageBody

inputFile ::= INPUT_FILE_SIGN filePath {
    pin = 1
}
outputFile ::= OUTPUT_FILE_SIGN filePath {
    pin = 1
}
historyBodyFileList ::= historyBodyFile+
historyBodyFile ::= HISTORY_FILE_SIGN filePath {
    pin = 1
}
filePath ::= (variable | filePathContent)+ {
    methods = [
        getReferences
    ]
    name = "absolute or relate file path"
}
filePathContent ::= FILE_PATH_PART

messageBody ::= MESSAGE_TEXT {
    mixin="org.javamaster.httpclient.inject.HttpPsiLanguageInjectionHost"
}

multipartMessage ::= (MESSAGE_BOUNDARY multipartField?)+
multipartField ::= header requestMessagesGroup {
    methods = [
        getContentType
    ]
}

responseHandler ::= responseScript
responseScript ::= OUT_START_SCRIPT_BRACE scriptBody END_SCRIPT_BRACE {
    pin = 1
}
scriptBody ::= SCRIPT_BODY_PAET {
  mixin="org.javamaster.httpclient.inject.HttpPsiLanguageInjectionHost"
  name = "script body"
}

//noinspection BnfUnusedRule
myJsonValue ::= (STRING_LITERAL_PART | variable)+