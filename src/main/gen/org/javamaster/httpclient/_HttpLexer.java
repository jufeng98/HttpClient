// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: _HttpLexer.flex

package org.javamaster.httpclient;

import com.intellij.psi.tree.IElementType;
import org.javamaster.httpclient.utils.LexerUtils;
import static org.javamaster.httpclient.utils.LexerUtils.*;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static org.javamaster.httpclient.psi.HttpTypes.*;



public class _HttpLexer implements com.intellij.lexer.FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int IN_GLOBAL_SCRIPT = 2;
  public static final int IN_GLOBAL_SCRIPT_END = 4;
  public static final int IN_PRE_SCRIPT = 6;
  public static final int IN_PRE_SCRIPT_END = 8;
  public static final int IN_DIRECTION_NAME = 10;
  public static final int IN_DIRECTION_VALUE = 12;
  public static final int IN_FIRST_LINE = 14;
  public static final int IN_HOST = 16;
  public static final int IN_PORT = 18;
  public static final int IN_QUERY = 20;
  public static final int IN_FRAGMENT = 22;
  public static final int IN_BODY = 24;
  public static final int IN_TRIM_PREFIX_SPACE = 26;
  public static final int IN_TRIM_PREFIX_ONLY_SPACE = 28;
  public static final int IN_PATH = 30;
  public static final int IN_JSON_VALUE = 32;
  public static final int IN_HEADER = 34;
  public static final int IN_HEADER_FIELD_NAME = 36;
  public static final int IN_HEADER_FIELD_VALUE = 38;
  public static final int IN_HEADER_FIELD_VALUE_NO_SPACE = 40;
  public static final int IN_POST_SCRIPT = 42;
  public static final int IN_POST_SCRIPT_END = 44;
  public static final int IN_INPUT_FILE_PATH = 46;
  public static final int IN_OUTPUT_FILE = 48;
  public static final int IN_OUTPUT_FILE_PATH = 50;
  public static final int IN_VERSION = 52;
  public static final int IN_HISTORY_BODY_FILE_PART = 54;
  public static final int IN_MULTIPART = 56;
  public static final int IN_VARIABLE = 58;
  public static final int IN_DYNAMIC_VARIABLE = 60;
  public static final int IN_DYNAMIC_VARIABLE_ARGS = 62;
  public static final int IN_GLOBAL_VARIABLE = 64;
  public static final int IN_GLOBAL_VARIABLE_VALUE = 66;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\25\u0100\1\u0200\11\u0100\1\u0300\17\u0100\1\u0400\247\u0100"+
    "\10\u0500\u1020\u0100";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\3\1\4\22\0\1\5\1\6"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\1\21\1\22\1\23\1\24\1\25\11\26"+
    "\1\27\1\0\1\30\1\31\1\32\1\33\1\34\4\35"+
    "\1\36\2\35\1\37\7\35\1\40\3\35\1\41\6\35"+
    "\4\0\1\42\1\0\1\43\1\44\1\43\1\45\1\46"+
    "\2\43\1\47\6\43\1\50\1\51\2\43\1\52\1\53"+
    "\1\54\1\43\1\55\3\43\1\56\1\0\1\57\7\0"+
    "\1\3\32\0\1\1\u01df\0\1\1\177\0\13\1\35\0"+
    "\2\3\5\0\1\1\57\0\1\1\240\0\1\1\377\0"+
    "\u0100\60";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\42\0\1\1\1\2\3\1\1\3\1\4\3\5\1\6"+
    "\1\1\1\5\1\7\2\6\1\10\1\7\2\11\1\1"+
    "\2\12\1\2\5\1\1\13\1\14\1\15\1\16\1\17"+
    "\1\20\1\21\1\22\1\23\1\24\1\1\2\25\12\26"+
    "\2\27\1\30\1\31\1\1\3\32\1\33\2\34\3\33"+
    "\1\35\1\36\3\37\1\5\2\40\5\5\1\1\1\41"+
    "\1\34\3\41\4\42\1\6\2\41\3\1\2\2\1\42"+
    "\1\1\1\43\1\44\1\1\1\45\2\1\1\46\1\47"+
    "\1\1\2\50\2\51\1\2\1\51\1\52\2\53\1\1"+
    "\6\0\1\54\2\5\1\0\1\55\2\7\2\11\1\56"+
    "\3\0\1\57\1\60\1\61\2\25\1\26\5\0\1\26"+
    "\2\0\2\26\1\62\3\0\1\63\1\64\2\0\1\65"+
    "\2\5\1\66\1\5\1\67\2\41\2\0\1\70\1\0"+
    "\1\71\1\0\1\72\1\0\1\73\2\0\1\50\2\51"+
    "\2\53\1\74\1\75\1\0\1\76\1\0\3\77\2\0"+
    "\1\5\1\100\1\7\1\11\1\101\2\0\1\57\1\25"+
    "\4\0\1\26\1\0\1\102\1\26\2\103\1\0\1\104"+
    "\1\0\1\105\1\42\2\5\1\41\1\106\1\107\1\0"+
    "\1\110\2\50\1\51\1\53\2\111\3\0\1\7\1\11"+
    "\1\0\1\25\1\0\1\112\3\113\1\0\1\102\1\26"+
    "\1\103\1\0\1\5\1\0\1\41\1\0\1\110\1\51"+
    "\1\53\2\76\1\114\1\0\1\112\1\0\1\115\1\116"+
    "\1\0\1\117\1\120\2\0\1\121";

  private static int [] zzUnpackAction() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0746\0\u0682"+
    "\0\u0777\0\u07a8\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce"+
    "\0\u0682\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u09f4\0\u0682"+
    "\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0b1a\0\u0b4b\0\u0b7c"+
    "\0\u0682\0\u0bad\0\u0715\0\u0682\0\u0682\0\u0bde\0\u0c0f\0\u0682"+
    "\0\u0682\0\u0c40\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35\0\u0d66"+
    "\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0682\0\u0715"+
    "\0\u0ebd\0\u0682\0\u0eee\0\u0f1f\0\u0f50\0\u0682\0\u0682\0\u0682"+
    "\0\u0f81\0\u0fb2\0\u0fe3\0\u0715\0\u1014\0\u0682\0\u0682\0\u0715"+
    "\0\u1045\0\u1076\0\u0682\0\u10a7\0\u10d8\0\u1109\0\u113a\0\u116b"+
    "\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291\0\u12c2\0\u0682"+
    "\0\u0715\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u1324\0\u13e8"+
    "\0\u1419\0\u0682\0\u144a\0\u147b\0\u14ac\0\u0682\0\u14dd\0\u150e"+
    "\0\u0682\0\u153f\0\u1570\0\u0682\0\u0682\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u0682\0\u16f8\0\u1729\0\u175a"+
    "\0\u178b\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u0682\0\u18b1"+
    "\0\u18e2\0\u1913\0\u0682\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u0682"+
    "\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b\0\u0682\0\u0682\0\u1acc\0\u1afd"+
    "\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23\0\u1c54\0\u1c85"+
    "\0\u1cb6\0\u1ce7\0\u1d18\0\u0682\0\u1d49\0\u1d7a\0\u1dab\0\u0682"+
    "\0\u0682\0\u0fb2\0\u1ddc\0\u0682\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0"+
    "\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u1f95\0\u0682\0\u1fc6\0\u0682"+
    "\0\u1ff7\0\u0682\0\u153f\0\u0682\0\u1570\0\u2028\0\u2059\0\u208a"+
    "\0\u20bb\0\u20ec\0\u211d\0\u0682\0\u0682\0\u214e\0\u17ed\0\u217f"+
    "\0\u0682\0\u181e\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5"+
    "\0\u22d6\0\u0682\0\u2307\0\u2338\0\u0682\0\u2369\0\u239a\0\u23cb"+
    "\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u0682\0\u2522"+
    "\0\u2553\0\u0682\0\u2584\0\u0682\0\u25b5\0\u25e6\0\u2617\0\u2648"+
    "\0\u0682\0\u0682\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e"+
    "\0\u0682\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5"+
    "\0\u28f6\0\u2927\0\u2958\0\u0682\0\u23fc\0\u2989\0\u29ba\0\u29eb"+
    "\0\u2a1c\0\u2553\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11\0\u2b42"+
    "\0\u2b73\0\u2ba4\0\u0682\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2df0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\43\5\44\2\43\1\45\13\43\1\46\3\43\1\47"+
    "\3\43\1\50\6\51\16\43\12\52\1\53\11\52\1\54"+
    "\34\52\1\43\5\55\4\43\1\56\11\43\1\46\34\43"+
    "\12\52\1\57\11\52\1\54\34\52\12\43\1\56\11\43"+
    "\1\46\34\43\2\60\1\61\1\60\1\62\1\63\16\60"+
    "\1\64\34\60\2\65\1\61\1\65\1\62\17\65\1\66"+
    "\31\65\1\67\2\65\2\43\2\70\1\71\1\72\16\43"+
    "\1\46\2\43\1\73\15\43\1\74\1\43\1\75\5\43"+
    "\1\76\1\77\4\43\2\70\1\71\1\100\2\43\1\101"+
    "\11\43\2\102\1\103\2\102\1\104\3\43\1\105\1\43"+
    "\5\102\1\43\13\102\1\77\4\43\2\70\1\71\1\100"+
    "\16\43\1\46\2\106\32\43\1\107\1\43\2\70\1\71"+
    "\1\100\2\107\1\101\2\107\1\110\10\107\1\46\4\107"+
    "\1\111\24\107\1\112\2\107\1\113\1\43\2\70\1\71"+
    "\1\100\16\113\1\114\34\113\1\115\1\116\1\117\1\120"+
    "\1\117\1\121\2\115\1\122\11\115\1\123\1\115\1\124"+
    "\3\115\1\125\1\115\1\126\26\115\1\127\5\44\16\127"+
    "\1\130\41\127\1\72\16\127\1\130\34\127\1\131\1\0"+
    "\2\70\1\71\1\100\2\131\1\101\13\131\1\132\6\131"+
    "\1\105\22\131\1\133\1\43\1\131\56\134\1\135\1\136"+
    "\1\134\2\137\1\140\1\137\1\141\1\142\2\137\1\143"+
    "\13\137\1\144\34\137\5\43\1\72\14\43\1\145\1\43"+
    "\1\46\2\145\1\146\5\43\5\145\1\43\13\145\3\43"+
    "\2\147\1\70\1\147\1\71\1\72\16\147\1\150\31\147"+
    "\1\151\2\147\2\152\1\153\1\152\1\154\1\155\16\152"+
    "\1\156\31\152\1\157\2\152\12\52\1\160\11\52\1\54"+
    "\5\52\1\161\26\52\12\43\1\162\11\43\1\46\34\43"+
    "\2\163\1\164\1\165\1\164\1\166\16\163\1\167\3\163"+
    "\1\43\1\163\1\43\23\163\2\43\1\163\1\170\5\55"+
    "\16\170\1\171\3\170\1\172\1\170\1\173\26\170\2\163"+
    "\1\174\1\175\1\174\1\176\16\163\1\167\3\163\1\43"+
    "\1\163\1\177\23\163\1\200\1\43\1\163\2\43\2\70"+
    "\1\71\1\72\16\43\1\46\12\43\1\201\21\43\2\163"+
    "\1\202\1\163\1\203\17\163\1\167\3\163\1\172\1\163"+
    "\1\170\23\163\1\204\1\170\1\163\22\43\1\205\1\43"+
    "\1\46\41\43\1\72\3\43\1\206\10\43\2\207\1\46"+
    "\2\207\6\43\21\207\1\43\1\210\6\43\1\72\7\43"+
    "\1\211\4\43\2\207\1\46\2\207\6\43\21\207\1\43"+
    "\1\210\6\43\1\72\1\43\1\212\4\43\1\213\1\43"+
    "\1\214\2\43\1\215\1\216\1\43\1\46\1\217\1\220"+
    "\32\43\2\221\1\174\1\222\1\174\1\223\16\221\1\224"+
    "\4\221\1\225\24\221\2\43\1\221\2\226\1\61\1\226"+
    "\1\62\17\226\1\227\31\226\1\230\2\226\62\0\5\44"+
    "\60\0\1\231\2\0\1\232\67\0\1\233\4\0\1\234"+
    "\41\0\1\235\1\236\107\0\6\51\16\0\12\52\1\0"+
    "\46\52\57\0\1\237\1\0\12\52\1\0\4\52\1\240"+
    "\4\52\1\241\34\52\1\0\5\55\132\0\1\242\60\0"+
    "\1\243\1\0\2\60\1\0\1\60\2\0\53\60\2\0"+
    "\1\61\63\0\1\63\53\0\2\60\1\0\1\60\2\0"+
    "\11\60\1\244\4\60\1\245\34\60\2\65\1\0\1\65"+
    "\1\0\51\65\1\0\4\65\1\0\1\65\1\0\12\65"+
    "\1\246\4\65\1\247\31\65\1\0\2\65\56\0\1\250"+
    "\4\0\1\70\63\0\1\72\77\0\1\251\110\0\1\252"+
    "\57\0\1\253\57\0\1\254\64\0\1\255\7\0\1\100"+
    "\75\0\2\102\1\0\2\102\6\0\5\102\1\0\13\102"+
    "\30\0\2\106\32\0\1\107\5\0\2\107\1\0\2\107"+
    "\1\0\10\107\1\0\4\107\1\0\24\107\1\0\2\107"+
    "\56\0\1\256\2\0\1\113\5\0\54\113\5\0\11\113"+
    "\1\257\4\113\1\260\34\113\2\115\1\0\1\115\1\0"+
    "\3\115\1\0\11\115\1\0\5\115\1\0\1\115\1\0"+
    "\27\115\1\116\1\261\1\116\1\261\1\116\2\115\1\0"+
    "\11\115\1\0\5\115\1\0\1\115\1\0\26\115\1\0"+
    "\1\261\3\117\1\261\2\0\1\262\11\0\1\263\1\0"+
    "\1\264\3\0\1\265\1\0\1\266\26\0\1\115\1\116"+
    "\1\117\1\120\1\117\1\116\2\115\1\262\11\115\1\263"+
    "\1\115\1\267\3\115\1\265\1\115\1\266\27\115\1\116"+
    "\1\117\1\120\1\117\1\121\2\115\1\0\11\115\1\0"+
    "\5\115\1\0\1\115\1\0\26\115\10\0\1\270\72\0"+
    "\1\271\36\0\2\115\1\0\1\115\1\0\3\115\1\0"+
    "\6\115\1\272\2\115\1\0\1\115\1\273\3\115\1\0"+
    "\1\115\1\0\26\115\5\0\1\274\24\0\1\275\33\0"+
    "\1\276\24\0\1\277\26\0\1\131\5\0\2\131\1\0"+
    "\13\131\1\0\6\131\1\0\22\131\2\0\1\131\56\0"+
    "\1\300\2\0\56\134\2\0\1\134\56\0\1\301\4\0"+
    "\1\140\60\0\2\140\1\141\1\302\63\0\1\303\72\0"+
    "\1\145\2\0\2\145\6\0\5\145\1\0\13\145\61\0"+
    "\1\304\2\0\2\152\1\0\1\152\2\0\50\152\1\0"+
    "\2\152\2\0\1\153\60\0\2\153\1\154\1\155\53\0"+
    "\2\152\1\0\1\152\2\0\11\152\1\305\4\152\1\306"+
    "\31\152\1\0\2\152\56\0\1\153\61\0\1\307\1\0"+
    "\5\52\1\310\4\52\1\0\46\52\57\0\1\311\1\0"+
    "\2\163\1\0\1\163\1\0\23\163\1\0\1\163\1\0"+
    "\23\163\2\0\1\163\2\0\3\164\54\0\2\163\1\164"+
    "\1\165\1\164\23\163\1\0\1\163\1\0\23\163\2\0"+
    "\3\163\1\164\1\165\1\164\1\166\22\163\1\0\1\163"+
    "\1\0\23\163\2\0\3\163\1\0\1\163\1\0\12\163"+
    "\1\312\4\163\1\313\3\163\1\0\1\163\1\0\23\163"+
    "\2\0\1\163\32\0\1\314\60\0\1\315\30\0\3\174"+
    "\54\0\2\163\1\174\1\175\1\174\23\163\1\0\1\163"+
    "\1\0\23\163\2\0\3\163\1\174\1\175\1\174\1\176"+
    "\22\163\1\0\1\163\1\0\23\163\2\0\1\163\56\0"+
    "\1\316\43\0\1\317\21\0\1\202\134\0\1\320\24\0"+
    "\1\321\60\0\2\207\1\0\2\207\6\0\21\207\62\0"+
    "\1\322\1\0\7\323\1\324\51\323\14\325\1\324\44\325"+
    "\25\0\1\217\1\220\55\0\1\326\12\0\1\327\7\0"+
    "\1\327\35\0\1\326\1\0\2\220\7\0\1\327\7\0"+
    "\1\327\12\0\2\221\1\0\1\221\2\0\23\221\1\0"+
    "\24\221\2\0\3\221\1\174\1\222\1\174\1\0\23\221"+
    "\1\0\24\221\2\0\1\221\2\0\3\174\1\223\53\0"+
    "\2\221\1\0\1\221\2\0\11\221\1\330\4\221\1\331"+
    "\4\221\1\0\24\221\2\0\1\221\2\226\1\0\1\226"+
    "\1\0\51\226\1\0\4\226\1\0\1\226\1\0\12\226"+
    "\1\332\4\226\1\333\31\226\1\0\2\226\56\0\1\334"+
    "\36\0\1\335\34\0\1\336\50\0\2\233\3\337\12\233"+
    "\1\340\41\233\2\234\1\341\1\342\1\343\54\234\56\0"+
    "\1\344\7\0\1\345\53\0\12\240\1\233\4\240\1\346"+
    "\41\240\2\241\1\52\1\241\1\52\5\241\1\234\46\241"+
    "\2\0\3\347\1\242\53\0\2\244\1\337\1\244\1\337"+
    "\1\233\11\244\1\350\41\244\2\245\1\341\1\245\1\343"+
    "\1\234\53\245\2\246\1\337\1\246\1\337\12\246\1\351"+
    "\36\246\1\233\2\246\2\247\1\341\1\247\1\343\51\247"+
    "\1\234\2\247\24\0\1\352\100\0\1\353\67\0\1\354"+
    "\57\0\1\355\6\0\1\257\1\233\3\337\1\233\11\257"+
    "\1\356\41\257\1\260\1\234\1\341\1\342\1\343\1\234"+
    "\53\260\1\0\5\261\63\0\1\357\72\0\1\360\62\0"+
    "\1\361\66\0\1\275\33\0\1\362\24\0\1\277\26\0"+
    "\2\115\1\0\1\115\1\0\3\115\1\0\11\115\1\0"+
    "\1\115\1\363\3\115\1\0\1\115\1\0\26\115\10\0"+
    "\1\364\72\0\1\365\2\0\2\365\6\0\5\365\1\0"+
    "\13\365\3\0\2\272\1\337\1\272\1\337\3\272\1\233"+
    "\6\272\1\366\2\272\1\233\5\272\1\233\1\272\1\233"+
    "\26\272\2\273\1\367\1\273\1\370\3\273\1\371\11\273"+
    "\1\371\5\273\1\371\1\273\1\371\26\273\5\0\1\372"+
    "\131\0\1\373\7\0\1\374\63\0\1\375\50\0\2\305"+
    "\1\337\1\305\1\337\1\233\11\305\1\376\36\305\1\233"+
    "\2\305\2\306\1\341\1\306\1\343\1\234\50\306\1\234"+
    "\2\306\1\0\5\307\53\0\12\52\1\0\43\52\1\377"+
    "\2\52\1\0\5\311\53\0\2\312\1\337\1\312\1\337"+
    "\12\312\1\u0100\10\312\1\233\1\312\1\233\23\312\2\233"+
    "\1\312\2\313\1\341\1\313\1\343\23\313\1\234\1\313"+
    "\1\234\23\313\2\234\1\313\5\0\1\u0101\60\0\1\u0102"+
    "\114\0\1\u0103\41\0\1\u0104\2\0\2\u0104\6\0\5\u0104"+
    "\1\0\13\u0104\30\0\2\u0105\52\0\1\u0106\1\0\1\u0106"+
    "\2\0\2\u0106\32\0\2\330\1\337\1\330\1\337\1\233"+
    "\11\330\1\u0107\11\330\1\233\24\330\2\233\1\330\2\331"+
    "\1\341\1\331\1\343\1\234\23\331\1\234\24\331\2\234"+
    "\1\331\2\332\1\337\1\332\1\337\12\332\1\u0108\36\332"+
    "\1\233\2\332\2\333\1\341\1\333\1\343\51\333\1\234"+
    "\2\333\2\336\2\u0109\1\u010a\53\336\1\0\2\233\3\337"+
    "\12\233\1\340\4\233\1\u010b\34\233\2\0\1\341\70\0"+
    "\1\u010c\124\0\1\u010d\2\0\12\240\1\233\4\240\1\346"+
    "\4\240\1\52\34\240\2\0\3\347\54\0\2\244\1\337"+
    "\1\244\1\337\1\233\11\244\1\350\4\244\1\u010e\34\244"+
    "\2\246\1\337\1\246\1\337\12\246\1\351\4\246\1\u010f"+
    "\31\246\1\233\2\246\44\0\1\u0110\65\0\1\254\7\0"+
    "\1\257\1\233\3\337\1\233\11\257\1\356\4\257\1\u0111"+
    "\34\257\10\0\1\u0112\72\0\1\u0113\2\0\2\u0113\6\0"+
    "\5\u0113\1\0\13\u0113\3\0\2\361\1\u0114\1\u0115\1\u0116"+
    "\54\361\56\0\1\u0117\2\0\2\363\1\u0114\1\363\1\u0116"+
    "\3\363\1\361\11\363\1\361\5\363\1\361\1\363\1\361"+
    "\26\363\2\364\2\367\1\370\53\364\2\0\5\u0118\14\0"+
    "\1\365\2\0\2\365\6\0\5\365\1\0\13\365\3\0"+
    "\2\272\1\337\1\272\1\337\3\272\1\233\6\272\1\366"+
    "\2\272\1\233\1\272\1\u0119\3\272\1\233\1\272\1\233"+
    "\26\272\2\0\1\367\56\0\2\371\1\367\1\u011a\1\370"+
    "\54\371\12\0\1\u011b\46\0\2\375\3\0\53\375\1\0"+
    "\2\305\1\337\1\305\1\337\1\233\11\305\1\376\4\305"+
    "\1\u011c\31\305\1\233\2\305\12\52\1\u011d\46\52\2\312"+
    "\1\337\1\312\1\337\12\312\1\u0100\4\312\1\u011e\3\312"+
    "\1\233\1\312\1\233\23\312\2\233\1\312\40\0\1\u011f"+
    "\21\0\5\u0120\14\0\1\u0104\2\0\2\u0104\6\0\5\u0104"+
    "\1\0\13\u0104\30\0\2\u0105\7\0\1\327\7\0\1\327"+
    "\37\0\2\u0106\32\0\2\330\1\337\1\330\1\337\1\233"+
    "\11\330\1\u0107\4\330\1\u0121\4\330\1\233\24\330\2\233"+
    "\1\330\2\332\1\337\1\332\1\337\12\332\1\u0108\4\332"+
    "\1\u0122\31\332\1\233\2\332\2\0\1\u0109\60\0\2\u0123"+
    "\1\u0124\56\0\3\u0125\1\u010c\65\0\1\u0126\46\0\2\60"+
    "\1\u0123\1\60\1\u0124\1\0\53\60\2\65\1\u0123\1\65"+
    "\1\u0124\51\65\1\0\2\65\50\0\1\355\10\0\1\113"+
    "\1\0\2\u0123\1\u0124\1\0\53\113\2\u0112\2\u0114\1\u0116"+
    "\53\u0112\2\0\5\u0127\14\0\1\u0113\2\0\2\u0113\6\0"+
    "\5\u0113\1\0\13\u0113\5\0\1\u0114\70\0\1\u0128\47\0"+
    "\5\u0118\53\0\2\115\1\u0123\1\115\1\u0124\3\115\1\0"+
    "\11\115\1\0\5\115\1\0\1\115\1\0\26\115\2\0"+
    "\3\u0129\1\u011b\53\0\2\152\1\u0123\1\152\1\u0124\1\0"+
    "\50\152\1\0\2\152\2\0\3\u012a\1\u011d\53\0\2\163"+
    "\1\u0123\1\163\1\u0124\23\163\1\0\1\163\1\0\23\163"+
    "\2\0\1\163\24\0\1\u012b\35\0\5\u0120\53\0\2\221"+
    "\1\u0123\1\221\1\u0124\1\0\23\221\1\0\24\221\2\0"+
    "\1\221\2\226\1\u0123\1\226\1\u0124\51\226\1\0\2\226"+
    "\2\0\1\u0123\60\0\3\u0125\56\0\3\u012c\1\u0126\54\0"+
    "\5\u0127\55\0\3\u012d\1\u0128\55\0\3\u0129\56\0\3\u012a"+
    "\101\0\2\u012e\34\0\3\u012c\56\0\3\u012d\77\0\1\u012f"+
    "\1\0\2\u012e\57\0\2\u0130\32\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[11809];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\42\0\1\11\4\1\1\11\10\1\1\11\6\1\1\11"+
    "\10\1\1\11\2\1\2\11\2\1\2\11\15\1\1\11"+
    "\2\1\1\11\3\1\3\11\5\1\2\11\3\1\1\11"+
    "\14\1\1\11\11\1\1\11\3\1\1\11\2\1\1\11"+
    "\2\1\2\11\7\1\1\11\3\1\6\0\1\11\2\1"+
    "\1\0\1\11\4\1\1\11\3\0\1\1\2\11\3\1"+
    "\5\0\1\1\2\0\2\1\1\11\3\0\2\11\2\0"+
    "\1\11\7\1\2\0\1\11\1\0\1\11\1\0\1\11"+
    "\1\0\1\11\2\0\5\1\2\11\1\0\1\1\1\0"+
    "\1\11\2\1\2\0\4\1\1\11\2\0\1\11\1\1"+
    "\4\0\1\1\1\0\2\1\1\11\1\1\1\0\1\11"+
    "\1\0\1\11\4\1\2\11\1\0\5\1\1\11\1\1"+
    "\3\0\2\1\1\0\1\1\1\0\1\1\1\11\2\1"+
    "\1\0\3\1\1\0\1\1\1\0\1\1\1\0\3\1"+
    "\1\11\2\1\1\0\1\1\1\0\2\1\1\0\2\1"+
    "\2\0\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[304];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
        public boolean nameFlag;
        private int nextState;

        public int matchTimes;
        public CharSequence lastMatch;

        public _HttpLexer() {
          this((java.io.Reader)null);
        }

        private static String zzToPrintable(CharSequence str) {
          return zzToPrintable(str.toString());
        }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _HttpLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
            switch (zzLexicalState) {
            case IN_BODY: {
              yybegin(YYINITIAL); return detectBodyType(this);
            }  // fall though
            case 305: break;
            case IN_HEADER_FIELD_VALUE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 306: break;
            case IN_HEADER_FIELD_VALUE_NO_SPACE: {
              yybegin(YYINITIAL); return FIELD_VALUE;
            }  // fall though
            case 307: break;
            case IN_POST_SCRIPT: {
              yybegin(YYINITIAL); return SCRIPT_BODY_PAET;
            }  // fall though
            case 308: break;
            case IN_HISTORY_BODY_FILE_PART: {
              yybegin(YYINITIAL); return WHITE_SPACE;
            }  // fall though
            case 309: break;
            default:
        return null;
        }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 82: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 83: break;
          case 3:
            { yybegin(IN_GLOBAL_VARIABLE); return AT;
            }
          // fall through
          case 84: break;
          case 4:
            { yybegin(IN_FIRST_LINE); return REQUEST_METHOD;
            }
          // fall through
          case 85: break;
          case 5:
            { 
            }
          // fall through
          case 86: break;
          case 6:
            { yybegin(YYINITIAL); return WHITE_SPACE;
            }
          // fall through
          case 87: break;
          case 7:
            { return DIRECTION_NAME_PART;
            }
          // fall through
          case 88: break;
          case 8:
            { yybegin(IN_DIRECTION_VALUE); return WHITE_SPACE;
            }
          // fall through
          case 89: break;
          case 9:
            { return DIRECTION_VALUE_PART;
            }
          // fall through
          case 90: break;
          case 10:
            { yybegin(IN_HEADER); return WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 11:
            { yybegin(IN_VERSION); return WHITE_SPACE;
            }
          // fall through
          case 92: break;
          case 12:
            { yybegin(IN_FRAGMENT); return HASH;
            }
          // fall through
          case 93: break;
          case 13:
            { return HOST_VALUE;
            }
          // fall through
          case 94: break;
          case 14:
            { yybegin(IN_PATH); return SLASH;
            }
          // fall through
          case 95: break;
          case 15:
            { yybegin(IN_PORT); return COLON;
            }
          // fall through
          case 96: break;
          case 16:
            { nameFlag = true; yybegin(IN_QUERY); return QUESTION;
            }
          // fall through
          case 97: break;
          case 17:
            { yybegin(IN_PATH); return PORT_SEGMENT;
            }
          // fall through
          case 98: break;
          case 18:
            { if(nameFlag) return QUERY_NAME; else return QUERY_VALUE;
            }
          // fall through
          case 99: break;
          case 19:
            { nameFlag = true; return AND;
            }
          // fall through
          case 100: break;
          case 20:
            { nameFlag = false; return EQUALS;
            }
          // fall through
          case 101: break;
          case 21:
            { return FRAGMENT_PART;
            }
          // fall through
          case 102: break;
          case 22:
            { lastMatch = yytext(); matchTimes++;
            }
          // fall through
          case 103: break;
          case 23:
            { yypushback(yylength()); yybegin(nextState);
            }
          // fall through
          case 104: break;
          case 24:
            { return SEGMENT;
            }
          // fall through
          case 105: break;
          case 25:
            { return SLASH;
            }
          // fall through
          case 106: break;
          case 26:
            { return STRING_LITERAL_PART;
            }
          // fall through
          case 107: break;
          case 27:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_NAME);
            }
          // fall through
          case 108: break;
          case 28:
            { matchTimes = 0; lastMatch = ""; yybegin(IN_BODY); return WHITE_SPACE;
            }
          // fall through
          case 109: break;
          case 29:
            { return FIELD_NAME;
            }
          // fall through
          case 110: break;
          case 30:
            { yybegin(IN_HEADER_FIELD_VALUE); return COLON;
            }
          // fall through
          case 111: break;
          case 31:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE_NO_SPACE);
            }
          // fall through
          case 112: break;
          case 32:
            { yypushback(yylength()); yybegin(IN_HEADER_FIELD_VALUE); return FIELD_VALUE;
            }
          // fall through
          case 113: break;
          case 33:
            { return FILE_PATH_PART;
            }
          // fall through
          case 114: break;
          case 34:
            { yypushback(yylength()); yybegin(YYINITIAL);
            }
          // fall through
          case 115: break;
          case 35:
            { yybegin(IN_DYNAMIC_VARIABLE); return DOLLAR;
            }
          // fall through
          case 116: break;
          case 36:
            { return IDENTIFIER;
            }
          // fall through
          case 117: break;
          case 37:
            { yybegin(IN_DYNAMIC_VARIABLE_ARGS); return LEFT_BRACKET;
            }
          // fall through
          case 118: break;
          case 38:
            { yybegin(IN_DYNAMIC_VARIABLE); return RIGHT_BRACKET;
            }
          // fall through
          case 119: break;
          case 39:
            { return COMMA;
            }
          // fall through
          case 120: break;
          case 40:
            { return NUMBER;
            }
          // fall through
          case 121: break;
          case 41:
            { return GLOBAL_NAME;
            }
          // fall through
          case 122: break;
          case 42:
            { nextState = IN_GLOBAL_VARIABLE_VALUE; yybegin(IN_TRIM_PREFIX_ONLY_SPACE); return EQUALS;
            }
          // fall through
          case 123: break;
          case 43:
            { return GLOBAL_VALUE;
            }
          // fall through
          case 124: break;
          case 44:
            { yypushback(yylength()); yybegin(IN_GLOBAL_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 125: break;
          case 45:
            { yypushback(yylength()); yybegin(IN_PRE_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 126: break;
          case 46:
            { nextState = IN_DIRECTION_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 127: break;
          case 47:
            { return SCHEMA_PART;
            }
          // fall through
          case 128: break;
          case 48:
            { nextState = IN_HOST; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 129: break;
          case 49:
            { nextState = IN_QUERY; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 130: break;
          case 50:
            { nextState = IN_INPUT_FILE_PATH; yybegin(IN_TRIM_PREFIX_ONLY_SPACE); return INPUT_FILE_SIGN;
            }
          // fall through
          case 131: break;
          case 51:
            { nextState = IN_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 132: break;
          case 52:
            { nextState = IN_JSON_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 133: break;
          case 53:
            { nextState = IN_HEADER_FIELD_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 134: break;
          case 54:
            { yypushback(yylength()); yybegin(IN_POST_SCRIPT_END); return SCRIPT_BODY_PAET;
            }
          // fall through
          case 135: break;
          case 55:
            { yybegin(IN_OUTPUT_FILE); return END_SCRIPT_BRACE;
            }
          // fall through
          case 136: break;
          case 56:
            { nextState = IN_OUTPUT_FILE_PATH; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 137: break;
          case 57:
            { nextState = IN_HISTORY_BODY_FILE_PART; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 138: break;
          case 58:
            { yybegin(nextState); return END_VARIABLE_BRACE;
            }
          // fall through
          case 139: break;
          case 59:
            { return STRING;
            }
          // fall through
          case 140: break;
          case 60:
            { nextState = IN_GLOBAL_VARIABLE_VALUE; yybegin(IN_VARIABLE); return START_VARIABLE_BRACE;
            }
          // fall through
          case 141: break;
          case 61:
            { yybegin(IN_DIRECTION_NAME); return DIRECTION_COMMENT_START;
            }
          // fall through
          case 142: break;
          case 62:
            { yypushback(1); return BLOCK_COMMENT;
            }
          // fall through
          case 143: break;
          case 63:
            { yypushback(1); return LINE_COMMENT;
            }
          // fall through
          case 144: break;
          case 64:
            { yybegin(YYINITIAL); return END_SCRIPT_BRACE;
            }
          // fall through
          case 145: break;
          case 65:
            { yybegin(IN_HOST); return SCHEMA_SEPARATE;
            }
          // fall through
          case 146: break;
          case 66:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 147: break;
          case 67:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 148: break;
          case 68:
            { nextState = IN_HISTORY_BODY_FILE_PART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 149: break;
          case 69:
            { nextState = IN_OUTPUT_FILE_PATH; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 150: break;
          case 70:
            { nextState = IN_HISTORY_BODY_FILE_PART; yybegin(IN_TRIM_PREFIX_ONLY_SPACE); return HISTORY_FILE_SIGN;
            }
          // fall through
          case 151: break;
          case 71:
            { nextState = IN_OUTPUT_FILE_PATH; yybegin(IN_TRIM_PREFIX_ONLY_SPACE); return OUTPUT_FILE_SIGN;
            }
          // fall through
          case 152: break;
          case 72:
            { yybegin(detectBoundaryState(yytext(), this)); return MESSAGE_BOUNDARY;
            }
          // fall through
          case 153: break;
          case 73:
            { return REQUEST_COMMENT;
            }
          // fall through
          case 154: break;
          case 74:
            { nextState = IN_MULTIPART; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 155: break;
          case 75:
            { nextState = YYINITIAL; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 156: break;
          case 76:
            { yybegin(IN_PRE_SCRIPT); return IN_START_SCRIPT_BRACE;
            }
          // fall through
          case 157: break;
          case 77:
            { if(LexerUtils.endsWithLineBreak(this)) { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this); }
            }
          // fall through
          case 158: break;
          case 78:
            { return OUT_START_SCRIPT_BRACE;
            }
          // fall through
          case 159: break;
          case 79:
            { yybegin(IN_GLOBAL_SCRIPT); return GLOBAL_START_SCRIPT_BRACE;
            }
          // fall through
          case 160: break;
          case 80:
            { nextState = IN_POST_SCRIPT; yypushback(yylength()); yybegin(IN_TRIM_PREFIX_SPACE); return detectBodyType(this);
            }
          // fall through
          case 161: break;
          case 81:
            { return HTTP_VERSION;
            }
          // fall through
          case 162: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
